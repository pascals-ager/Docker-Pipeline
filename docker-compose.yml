version: "2.1"

services:

  kafka-zk:
    build:
      context: ./kafka-zk
      dockerfile: Dockerfile
    image: kafka-zk
    container_name: kafka-zk
    hostname: kafka-zk
    ports:
      - "9092:9092"
      - "2181:2181"
    environment:
      ADVERTISED_HOST: kafka-zk
    networks: ['dev-cluster']


  schema-registry:
    build:
      context: ./cp-schema-registry
      dockerfile: Dockerfile
    image: schema-registry
    depends_on:
      - kafka-zk
    container_name: schema-registry
    hostname: schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'kafka-zk:2181'
    networks: ['dev-cluster']

  base:
      build:
          context: ./base
          dockerfile: Dockerfile
      image: base:1.0
      container_name: base

  node-master:
    depends_on:
        - base
    build:
        context: ./node-master
        dockerfile: Dockerfile
    image: node-master:1.0
    container_name: node-master
    ports:
        - "8088:8088"
        - "50070:50070"
        - "18081:18081"
        - "4040:4040"
    command: "/run.sh -d -node-master"
    networks: ['dev-cluster']

  node-one:
    depends_on:
        - base
    build:
        context: ./node-one
        dockerfile: Dockerfile
    image: node-one:1.0
    container_name: node-one
    ports:
        - "50075:50075"
    command: "/run.sh -d -node-one"
    networks: ['dev-cluster']

  node-two:
    depends_on:
        - base
    build:
        context: ./node-two
        dockerfile: Dockerfile
    image: node-two:1.0
    container_name: node-two
    ports:
        - "50078:50075"
    command: "/run.sh -d -node-two"
    networks: ['dev-cluster']

  node-three:
    depends_on:
        - base
    build:
        context: ./node-three
        dockerfile: Dockerfile
    image: node-three:1.0
    container_name: node-three
    ports:
        - "50080:50075"
    command: "/run.sh -d -node-three"
    networks: ['dev-cluster']

  node-four:
    depends_on:
      - base
    build:
      context: ./node-four
      dockerfile: Dockerfile
    image: node-four:1.0
    container_name: node-four
    ports:
      - "50082:50075"
    command: "/run.sh -d -node-four"
    networks: ['dev-cluster']

  node-five:
    depends_on:
      - base
    build:
      context: ./node-five
      dockerfile: Dockerfile
    image: node-five:1.0
    container_name: node-five
    ports:
      - "50083:50075"
    command: "/run.sh -d -node-five"
    networks: ['dev-cluster']

  postgresql-metastore-three:
    build:
      context: ./postgres-metastore-three
      dockerfile: Dockerfile
    image: postgresql-metastore-three
    container_name: postgresql-metastore-three
    ports:
      - "5432:5432"
    networks: ['dev-cluster']

  hive-metastore-three:
    depends_on:
      - base
    build:
      context: ./hive-three
      dockerfile: Dockerfile
    image: hive-metastore-three
    container_name: hive-metastore-three
    env_file:
      - hive-three/hadoop-hive.env
    command:  "/opt/hive/bin/hive --service metastore"
    environment:
      SERVICE_PRECONDITION: "node-master:50070 postgresql-metastore-three:5432"
    ports:
      - "9083:9083"
    networks: ['dev-cluster']

  hive-server-three:
    depends_on:
      - base
    build:
      context: ./hive-three
      dockerfile: Dockerfile
    image: hive-server-three
    container_name: hive-server-three
    env_file:
      - hive-three/hadoop-hive.env
    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore-three/default"
      SERVICE_PRECONDITION: "hive-metastore-three:9083"
    ports:
      - "10000:10000"
    networks: ['dev-cluster']

  nifi-one-dot-ten:
    build:
      context: ./nifi-one-dot-ten
      dockerfile: Dockerfile
    image: nifi-one-dot-ten
    container_name: nifi-one-dot-ten
    ports:
      - "8085:8085" # Unsecured HTTP Web Port
      - "19092:19092" # JMX
    networks: ['dev-cluster']
    environment:
      - NIFI_WEB_HTTP_PORT=8085

  master:
    container_name: "${COMPOSE_PROJECT_NAME:-citus}_master"
    image: 'citusdata/citus:9.1.1'
    ports: ["${MASTER_EXTERNAL_PORT:-5433}:5432"]
    labels: ['com.citusdata.role=Master']
    networks: ['dev-cluster']

  worker:
    image: 'citusdata/citus:9.1.1'
    labels: ['com.citusdata.role=Worker']
    depends_on: { manager: { condition: service_healthy } }
    networks: ['dev-cluster']

  manager:
    container_name: "${COMPOSE_PROJECT_NAME:-citus}_manager"
    image: 'citusdata/membership-manager:0.2.0'
    volumes: ['/var/run/docker.sock:/var/run/docker.sock']
    depends_on: { master: { condition: service_healthy } } 
    networks: ['dev-cluster']    

volumes:
  node-master:
  node-one:
  node-two:
  node-three:
  node-four:
  node-five:


networks:
  dev-cluster:
    external: true
